name: Test PR

# FIXME: Can we not build either job if stuff has been unchanged since last commit for that job?
# FIXME: Use branch name for tagging docker build
on:
  pull_request:
    branches:
      - main
    paths:
      - acarshub-typescript/**
      - Dockerfile.acarshub
      - Dockerfile.acarshub-nextgen
      - rootfs/**
      - .github/workflows/test-pr.yml
      - version-nextgen

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  shellcheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Pull koalaman/shellcheck:stable Image
        run: docker pull koalaman/shellcheck:stable
      - name: Run Shellcheck against shell scripts
        run: |
          find . -type f -exec grep -m1 -l -E '^#!.*sh.*' {} \; | grep -v -E '\/(.git\/|\S+.MD|\S+.md|retired_scripts\/|acarshub-typescript\/node_modules\/)'
          docker run --rm -i -v "$PWD:/mnt" koalaman/shellcheck:stable $(find . -type f -exec grep -m1 -l -E '^#!.*sh.*' {} \; | grep -v -E '\/(.git\/|\S+.MD|\S+.md|retired_scripts\/|acarshub-typescript\/node_modules\/)')
  #        docker run --rm -i -v "$PWD:/mnt" koalaman/shellcheck:stable $(find . -type f -exec grep -m1 -l -E '^#!.*execline.*' {} \; | grep -v '/.git/')
  markdownlint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Pull markdownlint/markdownlint:latest Image
        run: docker pull markdownlint/markdownlint:latest
      - name: Run markdownlint against *.md files
        run: docker run --rm -i -v "$(pwd)":/workdir --workdir /workdir markdownlint/markdownlint:latest -r ~MD013 $(find . -type f -iname '*.md' | grep -v '/.git/')

  flake8:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rrdtool librrd-dev
          python -m pip install --upgrade pip
          pip install flake8 pytest wheel
          pip install -r $GITHUB_WORKSPACE/rootfs/webapp/requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 --extend-ignore=W503,W504,E501

  acarshub-typescript:
    runs-on: ubuntu-latest
    needs: [hadolint, shellcheck, flake8]
    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3

      # Get version tag
      # git log -1 : get the latest commit
      # --format="%ct" : committer date, UNIX timestamp
      # Then using `date` to format to YYYYMMDD format
      - name: Get the version tag
        run: |
          echo "VERSION=$(sed '1!d' ./version-nextgen)" >> $GITHUB_ENV

      # Show version tag
      - name: Show version tag
        run: |
          echo "ACARS Hub Version: ${{ env.VERSION }}"

      - name: Build ACARSHub typescript test
        working-directory: ./acarshub-typescript
        run: |
          set -xe
          npm install
          sed -i 's/Pre-Release/ACARS Hub NextGen Pre-Release: ${{ env.VERSION }} Build ${{ github.run_number }}/' ./src/helpers/menu.ts
          npm run build
          mkdir -p ./webapp/static/images
          mkdir -p ./webapp/static/js
          mkdir -p ./webapp/static/sounds
          mkdir -p ./webapp/templates
          cp -r ./dist/static/images ./webapp/static/
          cp -r ./dist/static/sounds ./webapp/static/
          cp -r ./dist/static/js ./webapp/static/
          mv ./dist/static/index.html ./webapp/templates/
          tar cvfz webapp.tar.gz ./webapp
          cp webapp.tar.gz ../webapp.tar.gz

      - name: Save webapp.tar.gz
        uses: actions/upload-artifact@v3
        with:
          name: webapp
          path: |
            ./webapp.tar.gz

  hadolint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint $(find . -type f -iname "Dockerfile*")

  deploy_ghcr_nextgen_test:
    name: Deploy ACARS Hub Next Gen Base Image
    runs-on: ubuntu-latest
    needs: [hadolint, shellcheck, flake8]
    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v22.1
        with:
          files: |
            Dockerfile.nextgen
            .github/workflows/test-pr.yml
            rootfs/webapp/requirements.txt

      - name: Login to ghcr.io
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v2

      # Build & Push Dockerfile (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/sdr-enthusiasts/docker-acarshub:nextgen-test
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.nextgen
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-acarshub:nextgen-test
          labels: ${{ steps.meta.outputs.labels }}

  deploy_ghcr_latest_test:
    name: Deploy test to GHCR
    runs-on: ubuntu-latest
    needs:
      - acarshub-typescript
      - deploy_ghcr_nextgen_test

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v22.1
        with:
          files: |
            Dockerfile.nextgen
            Dockerfile.acarshub
            acarshub-typescript/**
            rootfs/**
            .github/workflows/test-pr.yml
            version

      - name: Get status of next file
        id: changed-file-nextgen
        uses: tj-actions/changed-files@v22.1
        with:
          files: |
            Dockerfile.nextgen

      - name: Download webapp
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/download-artifact@v3
        with:
          name: webapp

      - name: Get version
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "VERSION=$(sed '1!d' ./version-nextgen)" >> $GITHUB_ENV

      # Show version tag
      - name: Show version tag
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "ACARS Hub Version: ${{ env.VERSION }}"
          echo "ACARS Hub Build: ${{ github.run_number }}"

      - name: Create ACARS Hub Version file
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "${{ env.VERSION }} Build ${{ github.run_number }}" > ./rootfs/version

      - name: Create version file
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          rm ./rootfs/version
          echo "${{ env.VERSION }} Build ${{ github.run_number }}" >> ./rootfs/acarshub-version

      - name: Login to ghcr.io
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Patch Dockerfile if Nextgen was built for this branch
        if: steps.changed-file-nextgen.outputs.any_changed == 'true'
        run: sed -i "s/^FROM ghcr.io\/sdr-enthusiasts\/docker-acarshub:nextgen/FROM ghcr.io\/sdr-enthusiasts\/docker-acarshub:nextgen-test/g" Dockerfile.acarshub

      # Build & Push Dockerfile (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/sdr-enthusiasts/docker-acarshub:test
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.acarshub
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-acarshub:test
          #tags: ghcr.io/sdr-enthusiasts/docker-acarshub:test-${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          labels: ${{ steps.meta.outputs.labels }}
